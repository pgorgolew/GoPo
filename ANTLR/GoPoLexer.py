# Generated from GoPo.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,63,435,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
        1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,339,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,
        1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,52,1,52,1,52,1,52,5,52,370,8,52,10,52,12,52,373,9,52,
        1,52,1,52,1,53,3,53,378,8,53,1,53,1,53,1,54,1,54,3,54,384,8,54,1,
        55,1,55,1,55,5,55,389,8,55,10,55,12,55,392,9,55,1,56,1,56,1,56,5,
        56,397,8,56,10,56,12,56,400,9,56,3,56,402,8,56,1,57,1,57,1,58,4,
        58,407,8,58,11,58,12,58,408,1,59,1,59,5,59,413,8,59,10,59,12,59,
        416,9,59,1,60,1,60,5,60,420,8,60,10,60,12,60,423,9,60,1,60,1,60,
        1,61,4,61,428,8,61,11,61,12,61,429,1,61,1,61,1,62,1,62,0,0,63,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
        47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
        57,115,58,117,59,119,60,121,61,123,62,125,63,1,0,7,3,0,10,10,13,
        13,34,34,1,0,48,57,1,0,49,57,2,0,10,10,13,13,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,446,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,
        0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,127,1,0,0,0,3,130,1,0,0,0,5,
        135,1,0,0,0,7,140,1,0,0,0,9,144,1,0,0,0,11,151,1,0,0,0,13,157,1,
        0,0,0,15,165,1,0,0,0,17,170,1,0,0,0,19,177,1,0,0,0,21,187,1,0,0,
        0,23,193,1,0,0,0,25,197,1,0,0,0,27,201,1,0,0,0,29,209,1,0,0,0,31,
        215,1,0,0,0,33,223,1,0,0,0,35,232,1,0,0,0,37,238,1,0,0,0,39,241,
        1,0,0,0,41,245,1,0,0,0,43,248,1,0,0,0,45,251,1,0,0,0,47,253,1,0,
        0,0,49,255,1,0,0,0,51,258,1,0,0,0,53,261,1,0,0,0,55,263,1,0,0,0,
        57,265,1,0,0,0,59,267,1,0,0,0,61,269,1,0,0,0,63,273,1,0,0,0,65,277,
        1,0,0,0,67,281,1,0,0,0,69,285,1,0,0,0,71,289,1,0,0,0,73,291,1,0,
        0,0,75,293,1,0,0,0,77,295,1,0,0,0,79,297,1,0,0,0,81,299,1,0,0,0,
        83,301,1,0,0,0,85,303,1,0,0,0,87,308,1,0,0,0,89,314,1,0,0,0,91,319,
        1,0,0,0,93,322,1,0,0,0,95,338,1,0,0,0,97,340,1,0,0,0,99,346,1,0,
        0,0,101,351,1,0,0,0,103,358,1,0,0,0,105,365,1,0,0,0,107,377,1,0,
        0,0,109,383,1,0,0,0,111,385,1,0,0,0,113,401,1,0,0,0,115,403,1,0,
        0,0,117,406,1,0,0,0,119,410,1,0,0,0,121,417,1,0,0,0,123,427,1,0,
        0,0,125,433,1,0,0,0,127,128,5,45,0,0,128,129,5,62,0,0,129,2,1,0,
        0,0,130,131,5,108,0,0,131,132,5,105,0,0,132,133,5,115,0,0,133,134,
        5,116,0,0,134,4,1,0,0,0,135,136,5,115,0,0,136,137,5,111,0,0,137,
        138,5,114,0,0,138,139,5,116,0,0,139,6,1,0,0,0,140,141,5,109,0,0,
        141,142,5,97,0,0,142,143,5,112,0,0,143,8,1,0,0,0,144,145,5,102,0,
        0,145,146,5,105,0,0,146,147,5,108,0,0,147,148,5,116,0,0,148,149,
        5,101,0,0,149,150,5,114,0,0,150,10,1,0,0,0,151,152,5,108,0,0,152,
        153,5,105,0,0,153,154,5,109,0,0,154,155,5,105,0,0,155,156,5,116,
        0,0,156,12,1,0,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,
        118,0,0,160,161,5,101,0,0,161,162,5,114,0,0,162,163,5,115,0,0,163,
        164,5,101,0,0,164,14,1,0,0,0,165,166,5,100,0,0,166,167,5,114,0,0,
        167,168,5,111,0,0,168,169,5,112,0,0,169,16,1,0,0,0,170,171,5,114,
        0,0,171,172,5,101,0,0,172,173,5,109,0,0,173,174,5,111,0,0,174,175,
        5,118,0,0,175,176,5,101,0,0,176,18,1,0,0,0,177,178,5,114,0,0,178,
        179,5,101,0,0,179,180,5,109,0,0,180,181,5,111,0,0,181,182,5,118,
        0,0,182,183,5,101,0,0,183,184,5,65,0,0,184,185,5,108,0,0,185,186,
        5,108,0,0,186,20,1,0,0,0,187,188,5,99,0,0,188,189,5,111,0,0,189,
        190,5,117,0,0,190,191,5,110,0,0,191,192,5,116,0,0,192,22,1,0,0,0,
        193,194,5,115,0,0,194,195,5,117,0,0,195,196,5,109,0,0,196,24,1,0,
        0,0,197,198,5,97,0,0,198,199,5,100,0,0,199,200,5,100,0,0,200,26,
        1,0,0,0,201,202,5,102,0,0,202,203,5,111,0,0,203,204,5,114,0,0,204,
        205,5,69,0,0,205,206,5,97,0,0,206,207,5,99,0,0,207,208,5,104,0,0,
        208,28,1,0,0,0,209,210,5,99,0,0,210,211,5,108,0,0,211,212,5,101,
        0,0,212,213,5,97,0,0,213,214,5,114,0,0,214,30,1,0,0,0,215,216,5,
        105,0,0,216,217,5,115,0,0,217,218,5,69,0,0,218,219,5,109,0,0,219,
        220,5,112,0,0,220,221,5,116,0,0,221,222,5,121,0,0,222,32,1,0,0,0,
        223,224,5,99,0,0,224,225,5,111,0,0,225,226,5,110,0,0,226,227,5,116,
        0,0,227,228,5,97,0,0,228,229,5,105,0,0,229,230,5,110,0,0,230,231,
        5,115,0,0,231,34,1,0,0,0,232,233,5,112,0,0,233,234,5,114,0,0,234,
        235,5,105,0,0,235,236,5,110,0,0,236,237,5,116,0,0,237,36,1,0,0,0,
        238,239,5,111,0,0,239,240,5,114,0,0,240,38,1,0,0,0,241,242,5,97,
        0,0,242,243,5,110,0,0,243,244,5,100,0,0,244,40,1,0,0,0,245,246,5,
        61,0,0,246,247,5,61,0,0,247,42,1,0,0,0,248,249,5,33,0,0,249,250,
        5,61,0,0,250,44,1,0,0,0,251,252,5,62,0,0,252,46,1,0,0,0,253,254,
        5,60,0,0,254,48,1,0,0,0,255,256,5,62,0,0,256,257,5,61,0,0,257,50,
        1,0,0,0,258,259,5,60,0,0,259,260,5,61,0,0,260,52,1,0,0,0,261,262,
        5,43,0,0,262,54,1,0,0,0,263,264,5,45,0,0,264,56,1,0,0,0,265,266,
        5,42,0,0,266,58,1,0,0,0,267,268,5,47,0,0,268,60,1,0,0,0,269,270,
        5,109,0,0,270,271,5,111,0,0,271,272,5,100,0,0,272,62,1,0,0,0,273,
        274,5,112,0,0,274,275,5,111,0,0,275,276,5,119,0,0,276,64,1,0,0,0,
        277,278,5,97,0,0,278,279,5,98,0,0,279,280,5,115,0,0,280,66,1,0,0,
        0,281,282,5,108,0,0,282,283,5,111,0,0,283,284,5,103,0,0,284,68,1,
        0,0,0,285,286,5,110,0,0,286,287,5,111,0,0,287,288,5,116,0,0,288,
        70,1,0,0,0,289,290,5,61,0,0,290,72,1,0,0,0,291,292,5,40,0,0,292,
        74,1,0,0,0,293,294,5,41,0,0,294,76,1,0,0,0,295,296,5,123,0,0,296,
        78,1,0,0,0,297,298,5,125,0,0,298,80,1,0,0,0,299,300,5,46,0,0,300,
        82,1,0,0,0,301,302,5,44,0,0,302,84,1,0,0,0,303,304,5,116,0,0,304,
        305,5,114,0,0,305,306,5,117,0,0,306,307,5,101,0,0,307,86,1,0,0,0,
        308,309,5,102,0,0,309,310,5,97,0,0,310,311,5,108,0,0,311,312,5,115,
        0,0,312,313,5,101,0,0,313,88,1,0,0,0,314,315,5,110,0,0,315,316,5,
        111,0,0,316,317,5,110,0,0,317,318,5,101,0,0,318,90,1,0,0,0,319,320,
        5,105,0,0,320,321,5,102,0,0,321,92,1,0,0,0,322,323,5,101,0,0,323,
        324,5,108,0,0,324,325,5,115,0,0,325,326,5,101,0,0,326,94,1,0,0,0,
        327,328,5,101,0,0,328,329,5,108,0,0,329,330,5,105,0,0,330,339,5,
        102,0,0,331,332,5,101,0,0,332,333,5,108,0,0,333,334,5,115,0,0,334,
        335,5,101,0,0,335,336,5,32,0,0,336,337,5,105,0,0,337,339,5,102,0,
        0,338,327,1,0,0,0,338,331,1,0,0,0,339,96,1,0,0,0,340,341,5,119,0,
        0,341,342,5,104,0,0,342,343,5,105,0,0,343,344,5,108,0,0,344,345,
        5,101,0,0,345,98,1,0,0,0,346,347,5,102,0,0,347,348,5,117,0,0,348,
        349,5,110,0,0,349,350,5,99,0,0,350,100,1,0,0,0,351,352,5,114,0,0,
        352,353,5,101,0,0,353,354,5,116,0,0,354,355,5,117,0,0,355,356,5,
        114,0,0,356,357,5,110,0,0,357,102,1,0,0,0,358,359,3,107,53,0,359,
        360,5,46,0,0,360,361,5,46,0,0,361,362,5,46,0,0,362,363,1,0,0,0,363,
        364,3,107,53,0,364,104,1,0,0,0,365,371,5,34,0,0,366,370,8,0,0,0,
        367,368,5,34,0,0,368,370,5,34,0,0,369,366,1,0,0,0,369,367,1,0,0,
        0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,
        0,373,371,1,0,0,0,374,375,5,34,0,0,375,106,1,0,0,0,376,378,5,45,
        0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,3,109,
        54,0,380,108,1,0,0,0,381,384,3,111,55,0,382,384,3,113,56,0,383,381,
        1,0,0,0,383,382,1,0,0,0,384,110,1,0,0,0,385,386,3,113,56,0,386,390,
        5,46,0,0,387,389,7,1,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,
        1,0,0,0,390,391,1,0,0,0,391,112,1,0,0,0,392,390,1,0,0,0,393,402,
        5,48,0,0,394,398,7,2,0,0,395,397,7,1,0,0,396,395,1,0,0,0,397,400,
        1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,402,1,0,0,0,400,398,
        1,0,0,0,401,393,1,0,0,0,401,394,1,0,0,0,402,114,1,0,0,0,403,404,
        7,3,0,0,404,116,1,0,0,0,405,407,3,115,57,0,406,405,1,0,0,0,407,408,
        1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,118,1,0,0,0,410,414,
        7,4,0,0,411,413,7,5,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,
        1,0,0,0,414,415,1,0,0,0,415,120,1,0,0,0,416,414,1,0,0,0,417,421,
        5,35,0,0,418,420,8,3,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,
        1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,425,
        6,60,0,0,425,122,1,0,0,0,426,428,7,6,0,0,427,426,1,0,0,0,428,429,
        1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,
        6,61,0,0,432,124,1,0,0,0,433,434,9,0,0,0,434,126,1,0,0,0,13,0,338,
        369,371,377,383,390,398,401,408,414,421,429,1,6,0,0
    ]

class GoPoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    LIST = 2
    SORT = 3
    MAP = 4
    FILTER = 5
    LIMIT = 6
    REVERSE = 7
    DROP = 8
    REMOVE = 9
    REMOVE_ALL = 10
    COUNT = 11
    SUM = 12
    ADD = 13
    FOREACH = 14
    CLEAR = 15
    ISEMPTY = 16
    CONTAINS = 17
    PRINT = 18
    OR = 19
    AND = 20
    EQ = 21
    NEQ = 22
    GT = 23
    LT = 24
    GTEQ = 25
    LTEQ = 26
    PLUS = 27
    MINUS = 28
    MULT = 29
    DIV = 30
    MOD = 31
    POW = 32
    ABS = 33
    LOG = 34
    NOT = 35
    ASSIGN = 36
    OPAR = 37
    CPAR = 38
    OBRACE = 39
    CBRACE = 40
    DOT = 41
    COMMA = 42
    TRUE = 43
    FALSE = 44
    NONE = 45
    IF = 46
    ELSE = 47
    ELIF = 48
    WHILE = 49
    FUNC = 50
    RETURN = 51
    RANGE = 52
    STRING = 53
    NUMBER = 54
    NUMBER_PLUS = 55
    FLOAT = 56
    INT = 57
    NEWLINE = 58
    NEWLINES = 59
    ID = 60
    COMMENT = 61
    WHITESPACES = 62
    ANY = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'->'", "'list'", "'sort'", "'map'", "'filter'", "'limit'", 
            "'reverse'", "'drop'", "'remove'", "'removeAll'", "'count'", 
            "'sum'", "'add'", "'forEach'", "'clear'", "'isEmpty'", "'contains'", 
            "'print'", "'or'", "'and'", "'=='", "'!='", "'>'", "'<'", "'>='", 
            "'<='", "'+'", "'-'", "'*'", "'/'", "'mod'", "'pow'", "'abs'", 
            "'log'", "'not'", "'='", "'('", "')'", "'{'", "'}'", "'.'", 
            "','", "'true'", "'false'", "'none'", "'if'", "'else'", "'while'", 
            "'func'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "LIST", "SORT", "MAP", "FILTER", "LIMIT", "REVERSE", "DROP", 
            "REMOVE", "REMOVE_ALL", "COUNT", "SUM", "ADD", "FOREACH", "CLEAR", 
            "ISEMPTY", "CONTAINS", "PRINT", "OR", "AND", "EQ", "NEQ", "GT", 
            "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
            "POW", "ABS", "LOG", "NOT", "ASSIGN", "OPAR", "CPAR", "OBRACE", 
            "CBRACE", "DOT", "COMMA", "TRUE", "FALSE", "NONE", "IF", "ELSE", 
            "ELIF", "WHILE", "FUNC", "RETURN", "RANGE", "STRING", "NUMBER", 
            "NUMBER_PLUS", "FLOAT", "INT", "NEWLINE", "NEWLINES", "ID", 
            "COMMENT", "WHITESPACES", "ANY" ]

    ruleNames = [ "T__0", "LIST", "SORT", "MAP", "FILTER", "LIMIT", "REVERSE", 
                  "DROP", "REMOVE", "REMOVE_ALL", "COUNT", "SUM", "ADD", 
                  "FOREACH", "CLEAR", "ISEMPTY", "CONTAINS", "PRINT", "OR", 
                  "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", 
                  "MINUS", "MULT", "DIV", "MOD", "POW", "ABS", "LOG", "NOT", 
                  "ASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", "DOT", "COMMA", 
                  "TRUE", "FALSE", "NONE", "IF", "ELSE", "ELIF", "WHILE", 
                  "FUNC", "RETURN", "RANGE", "STRING", "NUMBER", "NUMBER_PLUS", 
                  "FLOAT", "INT", "NEWLINE", "NEWLINES", "ID", "COMMENT", 
                  "WHITESPACES", "ANY" ]

    grammarFileName = "GoPo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


